// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "dark"
  output   = "./ERD.svg"
  mmdcPath = "node_modules/.bin/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  name      String
  email     String      @unique
  password  String
  avatarURL String?
  Role      Role        @default(USER)
  Orders    Order[]
  Favorites Favorites[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
  refreshToken String?
}

model Product {
  id          String                 @id @default(cuid())
  title       String
  description String
  price       Decimal                @db.Decimal(10, 2)
  imageUrl    String
  Ingredients Ingredients[]
  Categories  CategoriesOnProducts[]

  Creator     User       @relation(fields: [creatorId], references: [id])
  creatorId   String
  Favorites   Favorites? @relation(fields: [favoritesId], references: [id])
  favoritesId String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  OrderProducts OrderProduct[]
}

model OrderProduct {
  id String @id @default(cuid())

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  Order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String?
  quantity  Int
}

model Order {
  id            String         @id @default(cuid())
  totalPrice    Decimal        @db.Decimal(10, 2)
  OrderProducts OrderProduct[]

  Owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String                 @id @default(cuid())
  name     String
  Products CategoriesOnProducts[]
}

model CategoriesOnProducts {
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, categoryId])
}

model Favorites {
  id      String    @id @default(cuid())
  Product Product[]

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Ingredients {
  id   String @id @default(cuid())
  name String

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
}

enum Role {
  USER
  ADMIN
}
